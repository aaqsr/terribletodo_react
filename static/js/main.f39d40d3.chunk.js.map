{"version":3,"sources":["index.js"],"names":["id","Todo","props","class","type","checked","todo","onClick","onToggle","text","onDelete","App","state","todos","handleKeyUp","bind","this","length","numberToggledTodos","onKeyUp","placeholder","map","removeTodo","toggleTodo","inputText","setState","filter","e","keyCode","target","value","trim","alert","addTodo","React","Component","ReactDOM","render","document","getElementById"],"mappings":"oMAIIA,G,MAAK,GAIHC,EAAO,SAAAC,GAET,OACI,yBAAKC,MAAM,YACP,4BACK,2BAAOC,KAAK,WAAWC,QAASH,EAAMI,KAAKD,QAASE,QAASL,EAAMM,WADxE,QAEK,0BAAMD,QAASL,EAAMM,UAArB,OACIN,EAAMI,KAAKG,MAEf,0BAAMN,MAAM,aACT,4BAAQI,QAASL,EAAMQ,UAAvB,YAGR,8BAMNC,E,kDAEF,aAAe,IAAD,8BACV,gBAEKC,MAAQ,CACTC,MAAO,CAAC,CACAb,GAAI,EACJS,KAAM,4BACNJ,SAAS,GAEb,CACIL,GAAI,EACJS,KAAM,mCACNJ,SAAS,KAIrB,EAAKS,YAAc,EAAKA,YAAYC,KAAjB,gBAhBT,E,qDAoBJ,IAAD,OACL,OACI,6BACI,oCACJ,yBAAKf,GAAG,OACJ,yBAAKA,GAAG,YACJ,yCAAegB,KAAKJ,MAAMC,MAAMI,OAAhC,KACA,wCAAcD,KAAKE,qBAAnB,MAEJ,4BALJ,IAMI,yBAAKlB,GAAG,YACJ,2BAAOI,KAAK,OAAOe,QAASH,KAAKF,YAAaM,YAAY,kBAE9D,4BACKJ,KAAKJ,MAAMC,MAAMQ,KAAI,SAAAf,GAAI,OAAM,kBAACL,EAAD,CAAMK,KAAMA,EAAMI,SAAU,kBAAM,EAAKY,WAAWhB,EAAKN,KAAKQ,SAAU,kBAAM,EAAKe,WAAWjB,EAAKN,e,8BASzIwB,GAIJR,KAAKS,SAAS,CACVZ,MAAM,GAAD,mBACEG,KAAKJ,MAAMC,OADb,CAED,CACIb,GAAIA,IACJS,KAAMe,EACNnB,SAAS,S,iCAOdL,GACPgB,KAAKS,SAAS,CACVZ,MAAOG,KAAKJ,MAAMC,MAAMa,QAAO,SAACpB,GAAD,OAAWA,EAAKN,KAAOA,S,iCAKnDA,GACPgB,KAAKS,SAAS,CACVZ,MAAOG,KAAKJ,MAAMC,MAAMQ,KAAI,SAACf,GACzB,OAAIN,IAAOM,EAAKN,GAAWM,EACpB,CACHN,GAAIM,EAAKN,GACTS,KAAMH,EAAKG,KACXJ,SAAUC,EAAKD,gB,2CAS3B,OADuBW,KAAKJ,MAAMC,MAAMa,QAAO,SAAApB,GAAI,OAAqB,IAAjBA,EAAKD,WACtCY,S,kCAIdU,GACU,KAAdA,EAAEC,UAC4B,KAA1BD,EAAEE,OAAOC,MAAMC,OACfC,MAAM,oCAENhB,KAAKiB,QAAQN,EAAEE,OAAOC,MAAMC,QAC5BJ,EAAEE,OAAOC,MAAQ,S,GA/FfI,IAAMC,WAsGxBC,IAASC,OACD,kBAAC1B,EAAD,MACJ2B,SAASC,eAAe,U","file":"static/js/main.f39d40d3.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nlet id = 2; // 0, 1 reserved for example\n\n\n// How a todo item looks like:\nconst Todo = props => {\n    // console.log(props);  // For debugging purposes\n    return (\n        <div class=\"todoItem\">\n            <li>\n                 <input type=\"checkbox\" checked={props.todo.checked} onClick={props.onToggle}/>     {/* todo is checked or not based on that props.todo.checked property */}\n                 <span onClick={props.onToggle}>    {/* Let's user click on the text and still have it toggle */}\n                    {props.todo.text}\n                 </span>\n                 <span class=\"delButton\">\n                    <button onClick={props.onDelete} >Delete</button>\n                 </span>\n            </li>\n            <p/>\n        </div>\n    )\n}\n\n// Main app class\nclass App extends React.Component {\n    // No props passed\n    constructor() {\n        super();\n        // store todos in state, comes with a few examples\n        this.state = {\n            todos: [{\n                    id: 0,\n                    text: \"click a todo to toggle it\",\n                    checked: false,\n                },\n                {\n                    id: 1,\n                    text: \"click delete to delete that todo\",\n                    checked: true,\n                },\n            ],\n        }\n        this.handleKeyUp = this.handleKeyUp.bind(this);\n    }\n\n    // main render func of the app\n    render() {\n        return (\n            <div>\n                <h1>todo</h1>\n            <div id=\"app\">\n                <div id=\"counters\">\n                    <span> total: {this.state.todos.length} </span>\n                    <span> left: {this.numberToggledTodos()} </span>\n                </div>\n                <p/> {/* Line break */}\n                <div id=\"inputBox\">\n                    <input type=\"text\" onKeyUp={this.handleKeyUp} placeholder=\"i have to...\"/>\n                </div>\n                <ul>\n                    {this.state.todos.map(todo => ( <Todo todo={todo} onDelete={() => this.removeTodo(todo.id)} onToggle={() => this.toggleTodo(todo.id)}/> ) )}\n                    {/* Takes each element in the array and passes it one by one with the name of \"todo\" as the prop of the Todo component. Also passes unique a function to delete that todo and one toggle that todo with that todos id. */}\n                </ul>\n            </div>\n            </div>\n        )\n    }\n\n    // called when button is clicked to add todo item\n    addTodo(inputText) {\n        // TODO: replace this with a text box not just a prompt\n        // const inputText = prompt(\"TODO text?\");\n        // Updates state with a new array of all the todos plus a new one\n        this.setState({\n            todos: [\n                ...this.state.todos,\n                {\n                    id: id++,\n                    text: inputText,\n                    checked: false,\n                }\n            ]\n        });\n    }\n\n    // passed with a unique id to every todos delete button. Updates state with array of all the todos with that one filtered out\n    removeTodo(id) {\n        this.setState({\n            todos: this.state.todos.filter((todo) => (todo.id !== id))\n        });\n    }\n\n    // passed with a unique id to every todo. Updates state with array of all the todos with that todos checked value flipped\n    toggleTodo(id) {\n        this.setState({\n            todos: this.state.todos.map((todo) => {\n                if (id !== todo.id) return todo;\n                return {\n                    id: todo.id,\n                    text: todo.text,\n                    checked: !todo.checked,\n                }\n            }),\n        });\n    }\n\n    // returns the number of checked todos\n    numberToggledTodos() {\n        const uncheckedTodos = this.state.todos.filter(todo => todo.checked === false);\n        return uncheckedTodos.length;\n    }\n\n    // Handles key press in the input box\n    handleKeyUp(e) {\n        if (e.keyCode === 13) {\n            if (e.target.value.trim() === '') {\n                alert(\"Please enter something first :)\")\n            } else {\n                this.addTodo(e.target.value.trim());\n                e.target.value = '';\n            }\n        }\n    }\n}\n\n// Tells react to call the App component's renderer at root element\nReactDOM.render(\n        <App />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}